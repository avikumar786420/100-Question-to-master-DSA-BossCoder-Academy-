/*Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.
Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].*/


Approach 1:
Time Complexity=O(n2)
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int n = nums.length;
        int[] res = new int[2];
        for(int i=0;i<n;i++){
            int rem = target - nums[i];
            for(int j=i+1;j<n;j++){
                if(nums[j]==rem){
                    res[0]=i;
                    res[1]=j;
                }
            }
        }
        return res;
    }
}

Approach 2:
Time Complexity=O(n)
class Solution {
    public int[] twoSum(int[] nums, int target) {
        int n = nums.length;
        int[] res = new int[2];
        Map<Integer,Integer> map=new HashMap<Integer,Integer>();
        for(int i=0;i<n;i++){
            if(map.containsKey(target-nums[i])){
                res[1]=i;
                res[0]=map.get(target-nums[i]);
                return res;
            }
            map.put(nums[i],i);
            }
            return res;
        }
    }

